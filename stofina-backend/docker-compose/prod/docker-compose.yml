version: "3.8"

services:
  grafana:
    image: grafana/grafana:11.4.0
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        /run.sh
    ports:
      - "3200:3000"
    volumes:
      - ../../observability/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      spring:



  backend:
    image: grafana/loki:3.1.2
    volumes:
      - ../../observability/loki/loki-config.yml:/etc/loki/config.yml
    ports:
      - "3100"
      - "7946"
    command: "-config.file=/etc/loki/config.yml -target=backend -legacy-read-mode=false"
    depends_on:
      - gateway
    networks:
      spring:

  gateway:
    image: nginx:1.27.3
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      spring:

  tempo:
    image: grafana/tempo:2.6.1
    container_name: tempo
    command: -config.file /etc/tempo-config.yml
    ports:
      - "3110:3100"
      - "4318:4318"
    volumes:
      - ../../observability/tempo/tempo.yml:/etc/tempo-config.yml
    networks:
      spring:

  prometheus:
    image: prom/prometheus:v3.1.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../../observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      spring:

  minio:
    image: minio/minio:RELEASE.2024-12-18T13-15-44Z
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    networks:
      spring:

  alloy:
    image: grafana/alloy:v1.5.1
    volumes:
      - ../../observability/alloy/alloy-local-config.yml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - 12345:12345
    depends_on:
      - gateway
    networks:
      spring:

  read:
    image: grafana/loki:3.1.2
    command: "-config.file=/etc/loki/config.yml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ../../observability/loki/loki-config.yml:/etc/loki/config.yml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      spring:
        aliases:
          - loki-read

  write:
    image: grafana/loki:3.1.2
    command: "-config.file=/etc/loki/config.yml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ../../observability/loki/loki-config.yml:/etc/loki/config.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      spring:
        aliases:
          - loki-write

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - spring

  kafka:
    image: confluentinc/cp-kafka:7.2.1
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true
      ALLOW_PLAINTEXT_LISTENER: yes
    networks:
      - spring

  adminer:
    image: adminer
    container_name: adminer
    restart: always
    ports:
      - "8085:8080"
    networks:
      - spring

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - spring
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  eureka-server:
    image: cihandsz/eureka-server
    container_name: eureka-server
    ports:
      - "8761:8761"
    environment:
      SPRING_PROFILES_ACTIVE: prod
    networks:
      - spring
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  customer-service:
    image: cihandsz/customer-service
    container_name: customer-service
    ports:
      - "9003:9003"
    environment:
      SPRING_JPA_HIBERNATE_DDL-AUTO: create-drop
      SPRING_PROFILES_ACTIVE: prod
      PROD_DB_HOST: 192.168.144.76:1450
      PROD_DB_USER: grup5
      PROD_DB_PASSWORD: iWzwn9ud962h9
      JWT_SECRET: 7A74h6Ne+6Dw2EQZ0VL7YpTeLYYa6iZ9Z3dJq1LC3Yg=
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eureka-server:8761/eureka"
    depends_on:
      eureka-server:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - spring
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9003/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  market-data-service:
    image: cihandsz/market-data-service
    container_name: market-data-service
    ports:
      - "9005:9005"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      PROD_DB_HOST: 192.168.144.76:1450
      PROD_DB_USER: grup5
      PROD_DB_PASSWORD: iWzwn9ud962h9
      JWT_SECRET: 7A74h6Ne+6Dw2EQZ0VL7YpTeLYYa6iZ9Z3dJq1LC3Yg=
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eureka-server:8761/eureka"
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      eureka-server:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - spring
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9003/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  order-service:
    image: cihandsz/order-service
    container_name: order-service
    ports:
      - "9006:9006"
    environment:
      PORTFOLIO_SERVICE_URL: http://portfolio-service:9001
      SPRING_PROFILES_ACTIVE: prod
      PROD_DB_HOST: 192.168.144.76:1450
      PROD_DB_USER: grup5
      PROD_DB_PASSWORD: iWzwn9ud962h9
      JWT_SECRET: 7A74h6Ne+6Dw2EQZ0VL7YpTeLYYa6iZ9Z3dJq1LC3Yg=
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eureka-server:8761/eureka"
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      MARKET_DATA_BASE_URL: http://market-data-service:9005/api
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      eureka-server:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - spring
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9003/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  portfolio-service:
    image: cihandsz/portfolio-service
    container_name: portfolio-service
    ports:
      - "9001:9001"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      PROD_DB_HOST: 192.168.144.76:1450
      PROD_DB_USER: grup5
      PROD_DB_PASSWORD: iWzwn9ud962h9
      JWT_SECRET: 7A74h6Ne+6Dw2EQZ0VL7YpTeLYYa6iZ9Z3dJq1LC3Yg=
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eureka-server:8761/eureka"
    depends_on:
      eureka-server:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - spring
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9001/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  api-gateway:
    image: cihandsz/api-gateway
    container_name: api-gateway
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eureka-server:8761/eureka"
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      eureka-server:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - spring
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  user-service:
    image: cihandsz/user-service
    container_name: user-service
    ports:
      - "9002:9002"
    environment:
      SPRING_JPA_HIBERNATE_DDL-AUTO: update
      SPRING_PROFILES_ACTIVE: prod
      PROD_DB_HOST: 192.168.144.76:1450
      PROD_DB_USER: grup5
      PROD_DB_PASSWORD: iWzwn9ud962h9
      JWT_SECRET: 7A74h6Ne+6Dw2EQZ0VL7YpTeLYYa6iZ9Z3dJq1LC3Yg=
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eureka-server:8761/eureka"
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      eureka-server:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - spring
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9002/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3


  mail-service:
    image: cihandsz/mail-service
    container_name: mail-service
    ports:
      - "9004:9004"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      PROD_DB_HOST: 192.168.144.76:1450
      PROD_DB_USER: grup5
      PROD_DB_PASSWORD: iWzwn9ud962h9
      JWT_SECRET: 7A74h6Ne+6Dw2EQZ0VL7YpTeLYYa6iZ9Z3dJq1LC3Yg=
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eureka-server:8761/eureka"
    depends_on:
      eureka-server:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - spring
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9004/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  spring:
    driver: bridge
